import csv
from cv2 import cv2
import os
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import glob
from collections import namedtuple


def xml_to_csv(path, image_ext=None):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    for xml_file in glob.glob(path + "/*.xml"):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        filename = root.find("filename").text
        if image_ext:
            filename = f"{filename}.{image_ext}"
        width = int(root.find("size").find("width").text)
        height = int(root.find("size").find("height").text)
        for member in root.findall("object"):
            bndbox = member.find("bndbox")
            value = (
                filename,
                width,
                height,
                member.find("name").text,
                int(bndbox.find("xmin").text),
                int(bndbox.find("ymin").text),
                int(bndbox.find("xmax").text),
                int(bndbox.find("ymax").text),
            )
            xml_list.append(value)
    column_name = [
        "filename",
        "width",
        "height",
        "class",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
    ]
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df


IMAGE_DIR = r"C:\Users\user\Desktop\ANSON\Python Scripts\coin_detection\Tensorflow\workspace\images\collectedimages\images"
XML_DIR = r"C:\Users\user\Desktop\ANSON\Python Scripts\coin_detection\Tensorflow\workspace\images\collectedimages\Annotations"
IMAGE_EXT = "jpg"

df = xml_to_csv(XML_DIR, IMAGE_EXT)

cnt = 0
error_cnt = 0
error = False

for row in df.values:

    if error == True:
        error_cnt += 1
        error = False

    (filename, width, height, class_label, xmin, ymin, xmax, ymax) = row
    # print(f"[INFO] Checking {filename}")

    cnt += 1

    image_path = os.path.join(IMAGE_DIR, filename)
    img = cv2.imread(image_path)

    if type(img) == type(None):
        error = True
        print("Could not read image", image_path)
        continue

    org_height, org_width = img.shape[:2]

    if org_width != width:
        error = True
        print("Width mismatch for image: ", filename, width, "!=", org_width)

    if org_height != height:
        error = True
        print("Height mismatch for image: ", filename, height, "!=", org_height)

    if xmin > org_width:
        error = True
        print("XMIN > org_width for file", filename)

    if xmin < 0:
        error = True
        print("XMIN < 0 for file", filename)

    if xmax > org_width:
        error = True
        print("XMAX > org_width for file", filename)

    if ymin > org_height:
        error = True
        print("YMIN > org_height for file", filename)

    if ymin <= 0:
        error = True
        print("YMIN < 0 for file", filename)

    if ymax > org_height:
        error = True
        print("YMAX > org_height for file", filename)

    if xmin >= xmax:
        error = True
        print("xmin >= xmax for file", filename)

    if ymin >= ymax:
        error = True
        print("ymin >= ymax for file", filename)

    if error == True:
        print("Error for file: %s" % filename)
        print()

print("Checked %d annotations and found %d errors" % (cnt, error_cnt))

